
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	
 *	Class: 		Main
 *	Source: 	C:\work\Flash\FlexTest\src\Main.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2010.01.09 02:28:47 JST
 */

package 
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.controls.Button;
import mx.core.Application;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.styles.*;


[Frame(extraClass="_Main_FlexInit")]

[Frame(factoryClass="_Main_mx_managers_SystemManager")]



public class Main
	extends mx.core.Application
{

	[Bindable]
/**
 * @private
 **/
	public var myButton : mx.controls.Button;




private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.core.Application
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.controls.Button
        ,
        id: "myButton"
        ,
        propertiesFactory: function():Object { return {
          label: "I'm a button!"
        }}
      })
    ]
  }}
})

    /**
     * @private
     **/
	public function Main()
	{
		super();

		mx_internal::_document = this;

		//	our style settings


		//	ambient styles
		mx_internal::_Main_StylesInit();

		//	properties

		//	events

	}

    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);



		super.initialize();
	}



    //	supporting function definitions for properties, events, styles, effects



	mx_internal static var _Main_StylesInit_done:Boolean = false;

	mx_internal function _Main_StylesInit():void
	{
		//	only add our style defs to the StyleManager once
		if (mx_internal::_Main_StylesInit_done)
			return;
		else
			mx_internal::_Main_StylesInit_done = true;

		var style:CSSStyleDeclaration;
		var effects:Array;


		StyleManager.mx_internal::initProtoChainRoots();
	}




}

}
